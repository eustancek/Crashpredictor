name: Train Crash Prediction Model

on:
  # Run daily at midnight UTC
  schedule:
    - cron: '0 0 * * *'
  # Also allow manual triggering
  workflow_dispatch:

jobs:
  train-model:
    runs-on: ubuntu-latest
    env:
      # Supabase configuration
      SUPABASE_PROJECT_REF: ${{ secrets.supabaseid }}
      SUPABASE_DB_PASSWORD: ${{ secrets.supabasepassword }}
      SUPABASE_DB_USER: postgres.${{ secrets.supabaseid }}
      SUPABASE_DB_HOST: aws-0-ca-central-1.pooler.supabase.com
      SUPABASE_DB_PORT: "5432"
      SUPABASE_DB_NAME: "postgres"
      
      # Hugging Face configuration
      HF_REPO_ID: "eustancek/Google-colab"
      HF_TOKEN: ${{ secrets.huggingtoken }}
      HF_MODEL_PATH: "models/latest_model.keras"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true  # Critical for Git LFS support
        fetch-depth: 0  # Required for proper LFS history

    - name: Set up Git LFS
      run: |
        git lfs install
        git lfs pull

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Train model
      run: |
        mkdir -p models
        python src/training.py

    - name: Commit updated model
      id: commit
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git add models/
        git commit -m "Update trained model" || echo "No changes to commit"
        git push origin main
      continue-on-error: true  # Don't fail if there are no changes

    - name: Deploy to Zeabur
      if: always() && steps.commit.outcome == 'success'
      run: |
        curl -X POST https://api.zeabur.com/projects/${{ secrets.zeaburid }}/services \
          -H "Authorization: Bearer ${{ secrets.zeaburkey }}" \
          -H "Content-Type: application/json" \
          -d '{
            "name": "crash-predictor-api",
            "repo": "https://github.com/${{ github.repository }}",
            "branch": "main",
            "buildCommand": "pip install -r requirements.txt",
            "startCommand": "python api/app.py",
            "envs": [
              {"name": "HF_TOKEN", "value": "${{ secrets.huggingtoken }}"},
              {"name": "PORT", "value": "8000"}
            ]
          }'

    - name: Get Zeabur API URL
      if: always() && steps.commit.outcome == 'success'
      id: get_url
      run: |
        # Get the service details to find the URL
        response=$(curl -s -H "Authorization: Bearer ${{ secrets.zeaburkey }}" \
          "https://api.zeabur.com/projects/${{ secrets.zeaburid }}/services")
        
        # Extract the URL - using proper JSON parsing
        url=$(echo "$response" | grep -o 'https://crash-predictor-api[^"]*\.zeabur\.app' | head -1)
        
        if [ -z "$url" ]; then
          echo "URL not found in response"
          echo "response=$response" >> $GITHUB_OUTPUT
          echo "::warning::Could not extract API URL from Zeabur response"
          exit 1
        fi
        
        echo "API_URL=$url" >> $GITHUB_OUTPUT
        echo "Zeabur API URL: $url"
        echo "::notice title=Zeabur URL::Your API URL is $url"
        echo "::notice title=Setup Instructions::1. Go to your repository Settings > Secrets > Actions"
        echo "::notice title=Setup Instructions::2. Create a new secret named 'zeaburl'"
        echo "::notice title=Setup Instructions::3. Paste this URL as the value"
      env:
        ZEABUR_API_KEY: ${{ secrets.zeaburkey }}
      continue-on-error: true

  warmup-api:
    runs-on: ubuntu-latest
    needs: train-model
    if: always() && needs.train-model.result == 'success'
    steps:
    - name: Warmup Zeabur API
      run: |
        # Check if we have the API URL
        if [ -z "${{ secrets.zeaburl }}" ]; then
          echo "API URL not set in secrets. Please add 'zeaburl' secret with your Zeabur API URL."
          echo "Follow the instructions from the previous job to set it up."
          exit 1
        fi
        
        echo "Warming up API at ${{ secrets.zeaburl }}/warmup"
        
        # Send warmup request with retry mechanism
        MAX_RETRIES=3
        RETRY_DELAY=2
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_RETRIES ]; do
          response=$(curl -s -o /dev/null -w "%{http_code}" -X GET ${{ secrets.zeaburl }}/warmup)
          
          if [ "$response" -eq 200 ]; then
            echo "Warmup successful (HTTP $response) on attempt $ATTEMPT"
            exit 0
          else
            echo "Warmup failed (HTTP $response) on attempt $ATTEMPT"
            if [ $ATTEMPT -lt $MAX_RETRIES ]; then
              echo "Retrying in $RETRY_DELAY seconds..."
              sleep $RETRY_DELAY
            fi
          fi
          ATTEMPT=$((ATTEMPT+1))
        done
        
        echo "Warmup failed after $MAX_RETRIES attempts"
        exit 1
